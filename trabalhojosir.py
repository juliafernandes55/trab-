import streamlit as st
import random
import io
from datetime import datetime

st.set_page_config(page_title="Recomendador de Looks", page_icon="üëó", layout="centered")
st.title("üëó Recomendador de Looks Personalizado")
st.markdown("Responda algumas perguntas e receba uma sugest√£o de look com a sua cara!")

# PERGUNTAS DO FORMUL√ÅRIO
ocasi√£o = st.selectbox("1Ô∏è‚É£ Qual a ocasi√£o?", [ 
    "Faculdade", "Shopping", "Date", "Praia", "Festa / Balada",
    "Museu", "Brunch", "Churrasco", "Cinema", "Teatro"
])

estilo = st.selectbox("2Ô∏è‚É£ Qual estilo voc√™ prefere?", [
    "B√°sico", "Fashionista", "Esportivo", "Rom√¢ntico", "Despojado"
])

clima = st.selectbox("3Ô∏è‚É£ Como est√° o clima hoje?", [
    "Calor", "Frio", "Ameno", "Chuvoso"
])

humor = st.selectbox("4Ô∏è‚É£ Como voc√™ est√° se sentindo hoje?", [
    "Confiante", "Na d√∫vida", "Pregui√ßosa", "Quieta e estilosa", "Pronta pra brilhar"
])

tempo_fora = st.radio("5Ô∏è‚É£ Vai passar quanto tempo fora de casa?", [
    "O dia inteiro", "S√≥ algumas horinhas", "N√£o sei ainda"
])

locomocao = st.selectbox("6Ô∏è‚É£ Vai como?", [
    "A p√©", "Transporte p√∫blico", "De carro", "Moto"
])

cal√ßado_preferido = st.radio("7Ô∏è‚É£ Tem prefer√™ncia de cal√ßado?", [
    "T√™nis", "Sand√°lia", "Salto", "Bota", "Tanto faz"
])

vibe_cor = st.radio("8Ô∏è‚É£ Prefere algo mais colorido ou neutro?", [
    "Colorid√£o", "Tons past√©is", "Neutro e elegante", "Preto sempre"
])

acessorios = st.radio("9Ô∏è‚É£ Curte usar acess√≥rios?", [
    "Sim, amo!", "Apenas alguns", "Prefiro evitar"
])

# BANCO DE DADOS DE OP√á√ïES
partes_cima = {
    "Calor": ["regata soltinha", "cropped leve", "blusa de al√ßa"],
    "Frio": ["su√©ter quentinho", "blusa de gola alta", "moletom estiloso"],
    "Ameno": ["camisa leve", "blusa de manga longa", "cardigan fofo"],
    "Chuvoso": ["jaqueta imperme√°vel", "capa estilosa", "blusa com capuz"]
}

partes_baixo = {
    "B√°sico": ["jeans reto", "short jeans", "legging confort√°vel"],
    "Fashionista": ["saia midi estampada", "cal√ßa cargo", "minissaia de couro"],
    "Esportivo": ["cal√ßa jogger", "short de treino", "legging com recortes"],
    "Rom√¢ntico": ["saia rodada", "vestido floral curto", "short de linho"],
    "Despojado": ["cal√ßa rasgada", "short estampado", "bermuda jeans"]
}

cal√ßados = {
    "T√™nis": ["t√™nis branco", "t√™nis chunky", "t√™nis plataforma"],
    "Sand√°lia": ["rasteirinha", "sand√°lia plataforma", "sand√°lia de tiras"],
    "Salto": ["salto grosso", "scarpin", "salto bloco confort√°vel"],
    "Bota": ["coturno", "bota cano m√©dio", "bota tratorada"],
    "Tanto faz": ["t√™nis estiloso", "sand√°lia confort√°vel", "bota leve"]
}

acessorios_por_estilo = {
    "B√°sico": ["rel√≥gio simples", "bolsa transversal"],
    "Fashionista": ["√≥culos escuros estilosos", "brincos grandes"],
    "Esportivo": ["bon√©", "mochilinha"],
    "Rom√¢ntico": ["colar delicado", "tiara ou presilha"],
    "Despojado": ["pulseira de mi√ßanga", "bucket hat"]
}

cores = {
    "Colorid√£o": "em cores vibrantes üåà",
    "Tons past√©is": "em tons suaves üíó",
    "Neutro e elegante": "em neutros chiques ü§ç",
    "Preto sempre": "em preto total üñ§"
}

# L√ìGICA DE MONTAGEM
def montar_look():
    topo = random.choice(partes_cima[clima])
    base = random.choice(partes_baixo[estilo])
    sapato = random.choice(cal√ßados[cal√ßado_preferido])

    if humor == "Pregui√ßosa":
        topo = "camiseta oversized"
        base = "moletom estiloso"
    elif humor == "Pronta pra brilhar":
        topo += " com brilho ‚ú®"
    
    if tempo_fora == "O dia inteiro":
        topo += " com sobreposi√ß√£o leve"

    if locomocao in ["A p√©", "Transporte p√∫blico"] and cal√ßado_preferido == "Salto":
        sapato = "t√™nis confort√°vel"

    acess = []
    if acessorios != "Prefiro evitar":
        acess = random.sample(acessorios_por_estilo[estilo], 1)

    look_texto = f"{topo} + {base} + {sapato} {cores[vibe_cor]}"
    return look_texto, acess

# GERAR LOOK
if st.button("üîÆ Me d√° meu look!"):
    look, acessorios_escolhidos = montar_look()
    
    st.subheader(f"‚úÖ Look ideal para {ocasi√£o}")
    st.write(f"üëâ {look}")
    
    if acessorios_escolhidos:
        st.write("‚ú® Acess√≥rio sugerido: " + ", ".join(acessorios_escolhidos))

    st.write(f"üéØ Estilo: {estilo} | ‚òÅ Clima: {clima} | üß† Humor: {humor}")
    st.write(f"üïí Tempo fora: {tempo_fora} | üöó Transporte: {locomocao}")

    # SALVAR LOOK
    if st.checkbox("üíæ Quero salvar meu look"):
        buffer = io.StringIO()
        buffer.write("üëó LOOK SALVO\n")
        buffer.write(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n")
        buffer.write(f"Ocasi√£o: {ocasi√£o}\nEstilo: {estilo}\nClima: {clima}\n")
        buffer.write(f"Look: {look}\n")
        acess_str = ", ".join(acessorios_escolhidos) if acessorios_escolhidos else "Nenhum"
        buffer.write(f"Acess√≥rios: {acess_str}\n")

        st.download_button(
            label="üì• Baixar meu look",
            data=buffer.getvalue(),
            file_name="meu_look.txt",
            mime="text/plain"
        )
import streamlit as st
import google.generativeai as genai
# T√≠tulo da p√°gina
st.set_page_config(page_title="Chat com IA - Gemini", layout="centered")
st.title("üí¨ Chat com a IA da Google (Gemini)")
# Campo para digitar a API Key
api_key = st.text_input("Digite sua chave da API Gemini", type="password")
# Campo para digitar a pergunta
user_input = st.text_area("Digite sua pergunta:")
# Bot√£o para enviar
if st.button("Enviar"):
   if not api_key:
       st.warning("Por favor, insira sua chave da API.")
   elif not user_input.strip():
       st.warning("Digite algo para a IA responder.")
   else:
       try:
           # Configurar a API com a chave informada
           genai.configure(api_key=api_key)
           # Selecionar o modelo
           model = genai.GenerativeModel("gemini-pro")
           # Fazer a gera√ß√£o
           response = model.generate_content(user_input)
           # Mostrar a resposta
           st.subheader("Resposta da IA:")
           st.write(response.text)
       except Exception as e:
           st.error(f"Erro: {e}")
           import streamlit as st
import google.generativeai as genai
# T√≠tulo da p√°gina
st.set_page_config(page_title="Chat com IA - Gemini", layout="centered")
st.title("üí¨ Chat com a IA da Google (Gemini)")
# Campo para digitar a API Key
api_key = st.text_input("Digite sua chave da API Gemini", type="password")
# Campo para digitar a pergunta
user_input = st.text_area("Digite sua pergunta:")
# Bot√£o para enviar
if st.button("Enviar"):
   if not api_key:
       st.warning("Por favor, insira sua chave da API.")
   elif not user_input.strip():
       st.warning("Digite algo para a IA responder.")
   else:
       try:
           # Configurar a API com a chave informada
           genai.configure(api_key=api_key)
           # Selecionar o modelo
           model = genai.GenerativeModel("gemini-pro")
           # Fazer a gera√ß√£o
           response = model.generate_content(user_input)
           # Mostrar a resposta
           st.subheader("Resposta da IA:")
           st.write(response.text)
       except Exception as e:
           st.error(f"Erro: {e}")
           import streamlit as st
import google.generativeai as genai
# T√≠tulo da p√°gina
st.set_page_config(page_title="Chat com IA - Gemini", layout="centered")
st.title("üí¨ Chat com a IA da Google (Gemini)")
# Campo para digitar a API Key
api_key = st.text_input("Digite sua chave da API Gemini", type="password")
# Campo para digitar a pergunta
user_input = st.text_area("Digite sua pergunta:")
# Bot√£o para enviar
if st.button("Enviar"):
   if not api_key:
       st.warning("Por favor, insira sua chave da API.")
   elif not user_input.strip():
       st.warning("Digite algo para a IA responder.")
   else:
       try:
           # Configurar a API com a chave informada
           genai.configure(api_key=api_key)
           # Selecionar o modelo
           model = genai.GenerativeModel("gemini-pro")
           # Fazer a gera√ß√£o
           response = model.generate_content(user_input)
           # Mostrar a resposta
           st.subheader("Resposta da IA:")
           st.write(response.text)
       except Exception as e:
           st.error(f"Erro: {e}")
           import streamlit as st
