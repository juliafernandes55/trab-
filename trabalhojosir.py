import streamlit as st
import random
import io
from datetime import datetime
import google.generativeai as genai

# Configura√ß√£o geral da p√°gina
st.set_page_config(page_title="App Estilo & IA", page_icon="üëó", layout="centered")

st.title("üëó Recomendador de Looks & üí¨ Chat Gemini")

tab_look, tab_chat = st.tabs(["üîÆ Recomendador de Looks", "üí¨ Chat Gemini"])

# --------------------------------------------------
# ABA 1: RECOMENDADOR DE LOOKS
# --------------------------------------------------
with tab_look:
    st.markdown("Responda algumas perguntas e receba uma sugest√£o de look que combine perfeitamente com voc√™!")

    ocasiao = st.selectbox("1Ô∏è‚É£ Qual a ocasi√£o?", [
        "Faculdade", "Shopping", "Date", "Praia", "Festa / Balada",
        "Museu", "Brunch", "Churrasco", "Cinema", "Teatro"
    ])

    estilo = st.selectbox("2Ô∏è‚É£ Qual estilo voc√™ prefere?", [
        "B√°sico", "Fashionista", "Esportivo", "Rom√¢ntico", "Despojado"
    ])

    clima = st.selectbox("3Ô∏è‚É£ Como est√° o clima hoje?", [
        "Calor", "Frio", "Ameno", "Chuvoso"
    ])

    humor = st.selectbox("4Ô∏è‚É£ Como voc√™ est√° se sentindo hoje?", [
        "Confiante", "Na d√∫vida", "Pregui√ßosa", "Quieta e estilosa", "Pronta pra brilhar"
    ])

    tempo_fora = st.radio("5Ô∏è‚É£ Vai passar quanto tempo fora de casa?", [
        "O dia inteiro", "S√≥ algumas horinhas", "N√£o sei ainda"
    ])

    locomocao = st.selectbox("6Ô∏è‚É£ Vai como?", [
        "A p√©", "Transporte p√∫blico", "De carro", "Moto"
    ])

    calcado_preferido = st.radio("7Ô∏è‚É£ Tem prefer√™ncia de cal√ßado?", [
        "T√™nis", "Sand√°lia", "Salto", "Bota", "Tanto faz"
    ])

    vibe_cor = st.radio("8Ô∏è‚É£ Prefere algo mais colorido ou neutro?", [
        "Colorid√£o", "Tons past√©is", "Neutro e elegante", "Preto sempre"
    ])

    acessorios = st.radio("9Ô∏è‚É£ Curte usar acess√≥rios?", [
        "Sim, amo!", "Apenas alguns", "Prefiro evitar"
    ])

    partes_cima = {
        "Calor": ["regata soltinha", "cropped leve", "blusa de al√ßa"],
        "Frio": ["su√©ter quentinho", "blusa de gola alta", "moletom estiloso"],
        "Ameno": ["camisa leve", "blusa de manga longa", "cardigan fofo"],
        "Chuvoso": ["jaqueta imperme√°vel", "capa estilosa", "blusa com capuz"]
    }

    partes_baixo = {
        "B√°sico": ["jeans reto", "short jeans", "legging confort√°vel"],
        "Fashionista": ["saia midi estampada", "cal√ßa cargo", "minissaia de couro"],
        "Esportivo": ["cal√ßa jogger", "short de treino", "legging com recortes"],
        "Rom√¢ntico": ["saia rodada", "vestido floral curto", "short de linho"],
        "Despojado": ["cal√ßa rasgada", "short estampado", "bermuda jeans"]
    }

    calcados = {
        "T√™nis": ["t√™nis branco", "t√™nis chunky", "t√™nis plataforma"],
        "Sand√°lia": ["rasteirinha", "sand√°lia plataforma", "sand√°lia de tiras"],
        "Salto": ["salto grosso", "scarpin", "salto bloco confort√°vel"],
        "Bota": ["coturno", "bota cano m√©dio", "bota tratorada"],
        "Tanto faz": ["t√™nis estiloso", "sand√°lia confort√°vel", "bota leve"]
    }

    acessorios_por_estilo = {
        "B√°sico": ["rel√≥gio simples", "bolsa transversal"],
        "Fashionista": ["√≥culos escuros estilosos", "brincos grandes"],
        "Esportivo": ["bon√©", "mochilinha"],
        "Rom√¢ntico": ["colar delicado", "tiara ou presilha"],
        "Despojado": ["pulseira de mi√ßanga", "bucket hat"]
    }

    cores = {
        "Colorid√£o": "em cores vibrantes üåà",
        "Tons past√©is": "em tons suaves üíó",
        "Neutro e elegante": "em neutros chiques ü§ç",
        "Preto sempre": "em preto total üñ§"
    }

    def montar_look():
        aviso = ""

        # Bloqueio de combina√ß√µes incoerentes
        if clima in ["Chuvoso", "Frio"] and calcado_preferido == "Sand√°lia":
            aviso += "üö´ Sand√°lia n√£o √© ideal para clima frio ou chuvoso. Substituindo por bota.\n"
            calcado_escolhido = "Bota"
        elif calcado_preferido == "Salto" and locomocao in ["A p√©", "Transporte p√∫blico"] and clima in ["Chuvoso", "Frio"]:
            aviso += "üö´ Salto em clima ruim e locomo√ß√£o a p√©/transporte p√∫blico n√£o √© ideal. Substituindo por t√™nis confort√°vel.\n"
            calcado_escolhido = "T√™nis"
        else:
            calcado_escolhido = calcado_preferido

        # Parte de cima baseada no clima
        topo = random.choice(partes_cima[clima])

        # Parte de baixo baseada em estilo + clima
        if clima == "Frio":
            if estilo == "Rom√¢ntico":
                base = "saia longa com meia-cal√ßa"
            elif estilo == "Esportivo":
                base = "legging t√©rmica"
            else:
                base = "cal√ßa estilosa de inverno"
        elif clima == "Chuvoso":
            base = "cal√ßa pr√°tica e imperme√°vel"
        elif clima == "Calor":
            base = random.choice([item for item in partes_baixo[estilo] if any(k in item for k in ["short", "saia", "vestido"])])
        else:
            base = random.choice(partes_baixo[estilo])

        # Cal√ßado final
        if calcado_escolhido == "Salto" and locomocao in ["A p√©", "Transporte p√∫blico"]:
            sapato = "t√™nis confort√°vel"
        else:
            sapato = random.choice(calcados[calcado_escolhido])

        # Ajustes por humor
        if humor == "Pregui√ßosa":
            topo = "camiseta oversized"
            base = "cal√ßa ou short de moletom"
        elif humor == "Pronta pra brilhar":
            topo += " com brilho ‚ú®"

        # Sobreposi√ß√£o se o dia for longo
        if tempo_fora == "O dia inteiro":
            topo += " com sobreposi√ß√£o leve"

        # Acess√≥rios opcionais
        acess = []
        if acessorios != "Prefiro evitar":
            acess = random.sample(acessorios_por_estilo[estilo], 1)

        look_texto = f"{topo} + {base} + {sapato} {cores[vibe_cor]}"
        return look_texto, acess, aviso

    if st.button("üîÆ Me d√° meu look!", key="gerar_look"):
        look, acessorios_escolhidos, alerta = montar_look()

        st.subheader(f"‚úÖ Look ideal para {ocasiao}")
        st.write(f"üëâ {look}")

        if acessorios_escolhidos:
            st.write("‚ú® Acess√≥rio sugerido: " + ", ".join(acessorios_escolhidos))

        st.write(f"üéØ Estilo: {estilo} | ‚òÅ Clima: {clima} | üß† Humor: {humor}")
        st.write(f"üïí Tempo fora: {tempo_fora} | üöó Transporte: {locomocao}")

        if alerta:
            st.warning(alerta.strip())

        if st.checkbox("üíæ Quero salvar meu look", key="save_look"):
            buffer = io.StringIO()
            buffer.write("üëó LOOK SALVO\n")
            buffer.write(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n")
            buffer.write(f"Ocasi√£o: {ocasiao}\nEstilo: {estilo}\nClima: {clima}\n")
            buffer.write(f"Look: {look}\n")
            acess_str = ", ".join(acessorios_escolhidos) if acessorios_escolhidos else "Nenhum"
            buffer.write(f"Acess√≥rios: {acess_str}\n")

            st.download_button(
                label="üì• Baixar meu look",
                data=buffer.getvalue(),
                file_name="meu_look.txt",
                mime="text/plain"
            )

# --------------------------------------------------
# ABA 2: CHAT GEMINI
# --------------------------------------------------
with tab_chat:
    st.markdown("Converse com o modelo **Gemini** da Google. Digite sua chave de API, liste os modelos dispon√≠veis, escolha um e pergunte o que quiser!")

    api_key = st.text_input("üîë Digite sua chave da API Gemini", type="password")
    listar_modelos = st.button("üìã Listar modelos dispon√≠veis")
    modelos = []
    modelo_selecionado = None

    if api_key:
        genai.configure(api_key=api_key)

        if listar_modelos:
            try:
                modelos = genai.list_models()
                nomes_modelos = [m.name for m in modelos]
                st.success(f"{len(nomes_modelos)} modelos encontrados.")
                st.session_state["modelos"] = nomes_modelos
            except Exception as e:
                st.error(f"Erro ao listar modelos: {e}")

        nomes_modelos = st.session_state.get("modelos", [])

        if nomes_modelos:
            modelo_selecionado = st.selectbox("Selecione o modelo para usar:", nomes_modelos)

        pergunta = st.text_area("‚úçÔ∏è Digite sua pergunta:")

        if st.button("Enviar pergunta"):
            if not api_key:
                st.warning("Por favor, insira sua chave da API.")
            elif not pergunta.strip():
                st.warning("Digite algo para a IA responder.")
            elif not modelo_selecionado:
                st.warning("Selecione um modelo para usar.")
            else:
                try:
                    model = genai.GenerativeModel(modelo_selecionado)
                    resposta = model.generate_content(pergunta)
                    st.subheader("üß† Resposta da IA:")
                    st.write(resposta.text)
                except Exception as e:
                    st.error(f"Erro ao gerar resposta: {e}")
    else:
        st.info("Digite sua chave da API para come√ßar a usar o chat.")


